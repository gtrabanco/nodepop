#!/usr/bin/env node
"use strict";


/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodepop:server');
var http = require('http');
var https = require('https');

//Rapid access to the configuration
var config = app.get('app config');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var secPort = normalizePort(process.env.SPORT || '4443');
app.set('secure port', secPort);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//Create the https if it is defined and activated
if (typeof config.https !== 'undefinied' && config.https.activate === true) {

    //We dont need to pass the activate var to the server
    delete config.https.activate;

    /**
     * Create HTTP server.
     */

    var secServer = https.createServer(config.https, app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    secServer.listen(secPort);
    secServer.on('error', onSecError);
    secServer.on('listening', onSecListening);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onSecError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof secPort === 'string'
        ? 'Pipe ' + secPort
        : 'Port ' + secPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onSecListening() {
    var addr = secServer.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
